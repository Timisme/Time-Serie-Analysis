fit = lm(y ~(.)^2, data= design2)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
effects$x
#library('rsm')
library('BsMD')
LenthPlot(fit)
LenthPlot(fit)
LenthPlot(fit.fit)
LenthPlot(fit)
c_design = rbind(design1, design2)
design1 = FrF2(8 , nfactors= 7,  generators = c('AB', 'AC', 'BC', 'ABC'), randomize = FALSE)
y= c(85.5, 75.1, 93.2, 145.4, 83.7, 77.6, 95, 141.8)
design1 = add.response(design1, y)
aliases(lm(y ~ (.)^2, data= design1), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= design1)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
design2 = FrF2(8 , nfactors= 7,  generators = c('-AB', '-AC', '-BC', 'ABC'), randomize = FALSE)
y= c(91.3, 136.7, 82.4, 73.4, 94.1, 143.8, 87.3, 71.9)
design2 = add.response(design2, y)
fit = lm(y ~(.)^2, data= design2)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
LenthPlot(fit)
effects$x
effects$effect
LenthPlot(fit, ylim= )
LenthPlot(fit, ylim= 20)
LenthPlot(fit, ylim= '30')
LenthPlot(fit)
design1 = FrF2(8 , nfactors= 7,  generators = c('AB', 'AC', 'BC', 'ABC'), randomize = FALSE)
y= c(85.5, 75.1, 93.2, 145.4, 83.7, 77.6, 95, 141.8)
design1 = add.response(design1, y)
aliases(lm(y ~ (.)^2, data= design1), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= design1)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
design2 = FrF2(8 , nfactors= 7,  generators = c('-AB', '-AC', '-BC', 'ABC'), randomize = FALSE)
y= c(91.3, 136.7, 82.4, 73.4, 94.1, 143.8, 87.3, 71.9)
design2 = add.response(design2, y)
fit = lm(y ~(.)^2, data= design2)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
LenthPlot(fit)
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
LenthPlot(fit)
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
LenthPlot(fit)
effects <- FrF2::DanielPlot(fit, code = TRUE)
LenthPlot(fit)
LenthPlot(fit, ylim= c(0,100))
LenthPlot(fit, c(0,100))
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
fit = lm(y ~(.)^2, data= c_design)
effects <- FrF2::DanielPlot(fit, code = TRUE)
LenthPlot(fit, c(0,100))
LenthPlot(fit)
c_design = rbind(design1, design2)
c_design
fit
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE)
LenthPlot(fit, plt = TRUE, limits = TRUE, ylim= c(0,20))
fit
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE, faclab = c(1,2,3,4,5))
LenthPlot(fit, plt = TRUE, limits = TRUE)
summary(fit)
fit = lm(y ~(.)^2, data= c_design, na.action=na.omit)
summary(fit)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE)
fit = lm(y ~(.)^2, data= c_design, na.action=na.exclude))
fit = lm(y ~(.)^2, data= c_design, na.action=na.exclude)
summary(fit)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE)
effects$x
effects$effect
summary(fit)
c_design = rbind(design1, design2)
aliases(lm(y ~ (.)^2, data= c_design), code = TRUE, condense= TRUE)
c_design
fit = lm(y ~(.)^2, data= c_design, na.action = na.omit)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
effects$effect
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE)
a
effects <- FrF2::DanielPlot(fit, code = TRUE)
fit = lm(y ~(.)^2, data= c_design, na.action = na.omit)
summary(fit)
fit = lm(y ~A+B+C+D+E+F+G+A*B+A*C+A*D+A*E+A*F+A*G++B*D, data= c_design, na.action = na.omit)
summary(fit)
effects <- FrF2::DanielPlot(fit, code = TRUE)
effects$x
summary(fit)
LenthPlot(fit, plt = TRUE, limits = TRUE)
design2 = FrF2(8 , nfactors= 7,  generators = c('AB', '-AC', 'BC', 'ABC'), randomize = FALSE)
design3= FrF2(8 , nfactors= 7,  generators = c('AB', '-AC', 'BC', 'ABC'), randomize = FALSE)
design3
alias(design3)
aliases(design3)
library(TSA)
library(fGarch)
library(tseries)
data(usd.hkd)
abs(usd.hkd$hkrate)
library(TSA)
library(fGarch)
library(tseries)
data(google)
plot(google)
acf(google)
pacf(google)
model = garch(google, order= c(1,1))
summary(model)
model = garch(google-mean(google), order= c(1,1))
summary(model)
model = garch(google, order= c(1,1))
summary(model)
residuals(model)
res = residuals(model)
plot(res)
acf(google^2)
pacf(google^2)
acf(res)
plot(res)
acf(res)
model = garch(google, order= c(1,1))
summary(model)
res = residuals(model)
plot(res)
acf(res)
res
model = garch(google, order= c(1,1), na.action= na.omit())
model = garch(google, order= c(1,1), na.action= na.omit)
summary(model)
res = residuals(model)
plot(res)
acf(res)
plot(res)
acf(res)
acf(res[2:n])
model.response()
model.response
fitted.values(model)
plot(fitted.values(model))
plot(fitted.values(model))
# (g)
confint(model, 'b1', level=0.95)
summary(model)
# (h)
volatility(google)
source('C:/Users/tom/Desktop/109-1課程/時間序列分析/R/hw12.R', echo=TRUE)
# (h)
volatility(google)
# (h)
var(google)
mean(google)
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
replicate(garch11.sim, 4)
replicate(n= 100, garch11.sim)
sim = replicate(n= 100, garch11.sim)
sim = replicate(n= 100, garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5))
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# set.seed(1234567)
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# sim = replicate(n= 100, garch11.sim)
garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
# plot(garch11.sim,type='l',ylab=expression(r[t]), xlab='t')
# sim = replicate(n= 100, garch11.sim)
sim = garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
sim
sim[1]
N = 2000
sim_h1 = rep(NA, N)
sim_h2 = rep(NA, N)
sim_h3 = rep(NA, N)
sim_h4 = rep(NA, N)
sim_h5 = rep(NA, N)
# set.seed(1234567)
for (i in 1:N){
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
sim_h1[i] = garch11.sim[1]
sim_h2[i] = garch11.sim[2]
sim_h3[i] = garch11.sim[3]
sim_h4[i] = garch11.sim[4]
sim_h5[i] = garch11.sim[5]
rm(garch11.sim)
}
quantile(sim_h1, c(.025, .0975))
quantile(sim_h1, c(.025, .975))
N = 20000
sim_h1 = rep(NA, N)
sim_h2 = rep(NA, N)
sim_h3 = rep(NA, N)
sim_h4 = rep(NA, N)
sim_h5 = rep(NA, N)
# set.seed(1234567)
for (i in 1:N){
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
sim_h1[i] = garch11.sim[1]
sim_h2[i] = garch11.sim[2]
sim_h3[i] = garch11.sim[3]
sim_h4[i] = garch11.sim[4]
sim_h5[i] = garch11.sim[5]
rm(garch11.sim)
}
quantile(sim_h1, c(.025, .975))
h1_ci = quantile(sim_h1, c(.025, .975))
h2_ci = quantile(sim_h2, c(.025, .975))
h3_ci = quantile(sim_h3, c(.025, .975))
h4_ci = quantile(sim_h4, c(.025, .975))
h5_ci = quantile(sim_h5, c(.025, .975))
h1_ci
h2_ci
h3_ci
N = 200000
sim_h1 = rep(NA, N)
sim_h2 = rep(NA, N)
sim_h3 = rep(NA, N)
sim_h4 = rep(NA, N)
sim_h5 = rep(NA, N)
# set.seed(1234567)
for (i in 1:N){
garch11.sim=garch.sim(alpha=c(0.00005302,0.1426),beta=0.7671,n=5)
sim_h1[i] = garch11.sim[1]
sim_h2[i] = garch11.sim[2]
sim_h3[i] = garch11.sim[3]
sim_h4[i] = garch11.sim[4]
sim_h5[i] = garch11.sim[5]
rm(garch11.sim)
}
h1_ci = quantile(sim_h1, c(.025, .975))
h2_ci = quantile(sim_h2, c(.025, .975))
h3_ci = quantile(sim_h3, c(.025, .975))
h4_ci = quantile(sim_h4, c(.025, .975))
h5_ci = quantile(sim_h5, c(.025, .975))
h3_ci
h1_ci
h2_ci
h3_ci
h4_ci
h5_ci
library(TSA)
library(tseries)
setwd("C:/Users/tom/Desktop/109-1課程/時間序列分析/期末專題")
df_aal = read.csv('AAL.csv')
df_covid = read.csv('us-covid.csv')
dates = as.Date(df_aal$Date,"%Y-%m-%d")
df_covid_new = df_covid[as.Date(df_covid$date,"%Y/%m/%d") %in% dates, ]
aal_data = df_aal$Close
covid_data = df_covid$cases
covid = df_covid_new$cases[101:240]
aal = aal_data[101:240]
plot(log(covid), log(aal))
plot(covid, aal)
ccf(x_new, res_y) #依照sarima配適後殘差
# sarima
mod = arima(covid^0.2, order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
hist(x_new)
t.test(x_new)
shapiro.test(x_new)
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# 對原始 y 配適相同model
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y) #依照sarima配適後殘差
mod = arima(covid, order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
detectAO(mod)
detectIO(mod)
#檢驗是否為white noise
hist(x_new)
t.test(x_new)
shapiro.test(x_new)
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# 對原始 y 配適相同model
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
# y_new = residuals(Arima(aal, model = mod))
ccf(x_new, res_y)
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# sarima
mod = arima(covid, order= c(1,2,1), seasonal = list(order= c(0,1,1), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
t.test(x_new)
shapiro.test(x_new)
acf(x_new, 60)
pacf(x_new, 60)
# sarima
mod = arima(covid, order= c(1,2,1), seasonal = list(order= c(0,1,1), period= 5))
x_new = mod$residuals
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# sarima
mod = arima(covid, order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
x_new = mod$residuals
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# sarima
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# sarima
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
hist(x_new)
shapiro.test(x_new)
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# 對原始 y 配適相同model
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y) #依照sarima配適後殘差
# sarima
mod = arima(covid^0.2, order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
# sarima
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
acf(x_new, 60)
pacf(x_new, 60)
Box.test(x_new, lag = 19,type = "Ljung")
# 對原始 y 配適相同model
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y) #依照sarima配適後殘差
ccf(x_new, res_y, main= '兩序列配飾模型後殘差之CCF圖') #依照sarima配適後殘差
ccf(x_new, res_y, main= 'CCF plot') #依照sarima配適後殘差
# 回歸模型
xt = x_new[1:139]
yt_lag1 = res_y[2:140]
# sarima
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
x_new = mod$residuals
detectAO(mod)
detectIO(mod)
t.test(x_new)
acf(x_new, 60)
pacf(x_new, 60)
# 對原始 y 配適相同model
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y, main= 'CCF plot') #依照sarima配適後殘差
# 回歸模型
xt = x_new[1:139]
yt_lag1 = res_y[2:140]
mod2 = lm(yt_lag1~xt)
summary(mod2)
mod2 = lm(yt_lag1~xt)
summary(mod2)
mod2 = lm(yt_lag1~0+xt)
summary(mod2)
xt_7 = x_new[1:133]
yt_lag7 = res_y[8:140]
mod3 = lm(yt_lag7~0+xt_7)
summary(mod3)
# 回歸模型
xt = x_new[1:139]
yt_lag1 = res_y[2:140]
mod2 = lm(yt_lag1~0+xt)
summary(mod2)
mod3 = lm(yt_lag7~xt_7)
xt_7 = x_new[1:133]
yt_lag7 = res_y[8:140]
mod3 = lm(yt_lag7~xt_7)
summary(mod3)
mod3 = lm(yt_lag7~0+xt_7)
summary(mod3)
plot(covid, aal)
rsq = (sum(yt_lag1^2)-sum(mod2$residuals^2))/sum(yt_lag1^2)
rsq
summary(mod2)
rsq
covid = df_covid_new$cases[101:346]
aal = aal_data[101:346]
covid = df_covid_new$cases[101:346]
aal = aal_data[101:346]
plot(covid, aal)
covid = df_covid_new$cases[101:346]
aal = aal_data[101:346]
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
shapiro.test(residuals(mod))
acf(residuals(mod), na.action = na.omit)
pacf(residuals(mod), na.action = na.omit)
Box.test(x_new, lag = 19,type = "Ljung")
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y, main= 'CCF plot') #依照sarima配適後殘差
covid
covid = df_covid_new$cases[101:280]
library(TSA)
library(tseries)
setwd("C:/Users/tom/Desktop/109-1課程/時間序列分析/期末專題")
df_aal = read.csv('AAL.csv')
df_covid = read.csv('us-covid.csv')
dates = as.Date(df_aal$Date,"%Y-%m-%d")
df_covid_new = df_covid[as.Date(df_covid$date,"%Y/%m/%d") %in% dates, ]
aal_data = df_aal$Close
covid_data = df_covid$cases
covid = df_covid_new$cases[101:280]
covid
covid = df_covid_new$cases[101:240]
aal = aal_data[101:346]
covid
aal = aal_data[101:240]
aal = aal_data[101:240]
plot(covid, aal)
ccf(covid, aal, na.action = na.omit) ## 需要prewhitening
mod = arima(log(covid), order= c(0,2,2), seasonal = list(order= c(1,0,0), period= 5))
# mod = arima(covid^0.2, order= c(5,2,2))
AIC(mod)
x_new = mod$residuals
t.test(residuals(mod))
shapiro.test(residuals(mod))
t.test(residuals(mod))
shapiro.test(residuals(mod))
acf(residuals(mod), na.action = na.omit)
pacf(residuals(mod), na.action = na.omit)
Box.test(x_new, lag = 19,type = "Ljung")
y_mod = arima(log(aal), order= c(3,1,0))
res_y = y_mod$residuals
ccf(x_new, res_y, main= 'CCF plot') #依照sarima配適後殘差
### lag = -1
xt = x_new[1:139]
yt_lag1 = res_y[2:140]
mod2 = lm(yt_lag1~0+xt)
summary(mod2)
### lag = -7
xt_7 = x_new[1:133]
yt_lag7 = res_y[8:140]
mod3 = lm(yt_lag7~0+xt_7)
summary(mod3)
